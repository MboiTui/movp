profiles {

    process.container = 'iracooke/movp:0.3'

    params.max_cpus=64
    params.max_memory=100.Gb


    test {
        params {
            genome="${projectDir}/test/data/QXJH01001862.fasta"
            samples="${projectDir}/test/test.csv"
            params.base_path="${projectDir}"
            outdir="${launchDir}/testout"
        }
    }
    test_pe {
        params {
            genome="${projectDir}/test/data/Sc0000011.fasta"
            samples="${projectDir}/test/test_pe.csv"
            params.base_path="${projectDir}"
            outdir="${launchDir}/testout"
        }
    }

    standard {
        process.executor = 'local'
    }

    docker {
        process.executor = 'local'
        docker.enabled = true
    }

    singularity {
        process.executor = 'local'
        singularity.enabled = true
    }    

    zodiac {
        process.executor = 'pbspro'
        singularity.enabled = true
        runOptions = "-B ${PWD}:${PWD}"
    }


    genomics {
        process.executor = 'local'
        singularity.enabled = true
        runOptions = "-B ${PWD}:${PWD}"
    }
}

process {
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}